Concept Map: init, add, staging area

We’ve introduced a few new concepts since we last revisited our concept map.

git init
git add
git status
staging area
working directory
Previous Version

Remember our concept map from last lesson? Here’s what it looked like the last time we added a new concept.

Concept Map from last time

Where Do the New Concepts Go?

Here’s the structure we’ve come up with for how to add these new concepts in to the map. Which concept belongs where?

Concept Map with blanks

In the following quiz, write in the concept that you think belongs in each new empty node.

--------------------------------------------------------------------------------
Reflect: Staging Area

Now that you’ve added a file to the staging area (or maybe multiple files!), go add the following question and your thoughts on it to your lesson_2_reflections file:

How is the staging area different from the working directory and the repository? What value do you think it offers?

When you've updated your document, click "Next" and Caroline will go over how to commit the changes you’ve added to the staging area.
--------------------------------------------------------------------------------
How to write a commit message

You're about to make your first commit to your reflections repository. When you do this, you'll need to write a commit message describing your changes. If you followed the instructions in the "Setting Up Your Workspace" video for your platform near the end of Lesson 1, the editor you chose will appear as soon as you run git commit and allow you to write a commit message. If you get an error message, you should try revisiting the instructions in Lesson 1 and make sure your text editor is set up properly.

You can also specify a commit message via the command line by running git commit -m "Commit message" instead of just git commit. It's still a good idea to get an editor set up, since this will make it easier to write long commit messages that fully describe the change.

Commit message style

While commit message style varies from person to person, this style guide describes some common best practices when writing commit messages.

--------------------------------------------------------------------------------
Leave 'detached HEAD' state

Right now, your HEAD should still be 'detached' from Lesson 1 when you checked out an old commit. To fix that, run the command git checkout master. You'll learn more about what this command does later this lesson.

Fix the delay bug

Now, if you were following along with Caroline, you may have already fixed the bug in the Asteroids repository. If not, go ahead and make the change and add it to the staging area now.

In game.js find the statement if (this.delayBeforeBullet <= 0) { (should be on line 423). On the next line, insert this.delayBeforeBullet = 10;

Stage your change

Then stage your change by adding the game.js file to the staging area. If you’re having trouble remembering how to stage changes, use this video as a refresher.

Commit your change

Now, go ahead and commit this change. Make sure to use a meaningful commit message! If you have trouble remember how to commit, refer to this video.

When you’re finished committing your change, click “Next”.

--------------------------------------------------------------------------------
Checking out the coins branch

If you haven't already checked out the coins branch, you'll need to do so now with the command git checkout coins before you'll be able to refer to it. Once you've done that, decide whether you should keep it checked out or check out a different branch before completing the merge.

A note about git merge

git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.

Merge conflict

If you get a message like this

Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.
then your files were not in the same state as Caroline's when you started the merge. To fix this, complete the following steps:

Restore your files to their state before you started the merge by running git merge --abort
Double check the state of your files. If you run git log while the master branch is checked out, you should see Caroline's "Add color" commit as the second-most-recent, and the most recent should be your commit fixing the bullet bug. If you use git diff to compare your commit to Caroline's, your commit should introduce the line this.delayBeforeBullet = 10; on line 424. The line should be indented to the same level as the line below it using only spaces (no tabs), and the line should have no spaces after it.
Once your file is in the correct state, create a new commit with your changes.
Try the merge again.
Comparing a commit to its parent

The command Caroline mentions to compare a commit to its parent is git show commit_id
--------------------------------------------------------------------------------
Concept Map: branch, merge

Here's where we left off with the concept map: Concept Map branch and merge

New ideas

Since then, we've talked about a few new ideas. The biggest ones are the ideas of branching and merging.

Where do branching and merging fit best in the Concept Map? Continue to the quiz to add them.

Concept Map branch and merge

Continue to Quiz

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
