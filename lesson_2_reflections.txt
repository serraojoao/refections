Concept Map: init, add, staging area

We’ve introduced a few new concepts since we last revisited our concept map.

git init
git add
git status
staging area
working directory
Previous Version

Remember our concept map from last lesson? Here’s what it looked like the last time we added a new concept.

Concept Map from last time

Where Do the New Concepts Go?

Here’s the structure we’ve come up with for how to add these new concepts in to the map. Which concept belongs where?

Concept Map with blanks

In the following quiz, write in the concept that you think belongs in each new empty node.

--------------------------------------------------------------------------------
Reflect: Staging Area

Now that you’ve added a file to the staging area (or maybe multiple files!), go add the following question and your thoughts on it to your lesson_2_reflections file:

How is the staging area different from the working directory and the repository? What value do you think it offers?

When you've updated your document, click "Next" and Caroline will go over how to commit the changes you’ve added to the staging area.
--------------------------------------------------------------------------------
How to write a commit message

You're about to make your first commit to your reflections repository. When you do this, you'll need to write a commit message describing your changes. If you followed the instructions in the "Setting Up Your Workspace" video for your platform near the end of Lesson 1, the editor you chose will appear as soon as you run git commit and allow you to write a commit message. If you get an error message, you should try revisiting the instructions in Lesson 1 and make sure your text editor is set up properly.

You can also specify a commit message via the command line by running git commit -m "Commit message" instead of just git commit. It's still a good idea to get an editor set up, since this will make it easier to write long commit messages that fully describe the change.

Commit message style

While commit message style varies from person to person, this style guide describes some common best practices when writing commit messages.

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
